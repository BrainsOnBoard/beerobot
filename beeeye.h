/*
 * File:   beeeye.h
 * Author: ad374
 *
 * Created on 16 May 2017, 10:59
 */

#ifndef BEEEYE_H
#define BEEEYE_H

// opencv includes
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

// bee-eye pixel map generated by gigerommatidiamodel.py
#include "gigerdatacam.h"

#include <iostream>
#include <fstream>

#ifdef USE_ROBOT
// Surveyor's webcam stream
//#define VIDEO_DEV "http://192.168.1.1:8080/?action=stream"
//#define VID_WIDTH 640
//#define VID_HEIGHT 480

// Kodak PixPro
#define VIDEO_DEV "http://172.16.0.254:9176"
#define VID_WIDTH 1024
#define VID_HEIGHT 1024
#else
// USB webcam
#define VIDEO_DEV 0 //get_camera_by_name("USB 2.0 Camera")
#define VID_WIDTH 640
#define VID_HEIGHT 480
#endif

#include "ini.h"

using namespace std;
using namespace cv;

const int CROSS_SIZE = 20;

const int KEY_LEFT = 81;
const int KEY_UP = 82;
const int KEY_RIGHT = 83;
const int KEY_DOWN = 84;

const int BIG_PX_JUMP = 5;

inline void calib_line(Mat &src, Point p1, Point p2) {
    line(src, p1, p2, Scalar(0x00, 0xff, 0x00), 2);
}

int get_camera_by_name(const char* name) {
    char cname[4096];
    for (int i = 0;; i++) {
        string vfn = "/sys/class/video4linux/video" + to_string(i) + "/name";
        ifstream file(vfn, ios::in);
        if (!file.is_open())
            return -1;

        file.read(cname, sizeof (cname));
        cname[file.gcount() - 1] = 0;
        file.close();

        if (strcmp(name, cname) == 0)
            return i;
    }
}

/*
 * Displays camera output on screen after passing through bee-eye transform.
 * User can press Q to quit.
 */
void run_camera() {

    Size sz(720, 480);

    // read params from file
    CamParams p;
    p.read();

    // to capture webcam output
    VideoCapture cap(VIDEO_DEV);
    if (!cap.isOpened()) {
        cerr << "Error: Could not open webcam" << endl;
        exit(1);
    }

    Size sz_out(eye_size[0], eye_size[1]);
    Mat dst_eye;
    dst_eye.create(sz_out, CV_8UC3);

    // create x and y pixel maps
    Mat map_x, map_y;
    map_x.create(sz_out, CV_32FC1);
    map_y.create(sz_out, CV_32FC1);
    for (int i = 0; i < gdataLength; i++) {
        // left eye
        map_x.at<float>(gdata[i][3], 15 + gdata[i][2]) = floor(gdata[i][0]);
        map_y.at<float>(gdata[i][3], 15 + gdata[i][2]) = floor(gdata[i][1]);

        // right eye
        map_x.at<float>(gdata[i][3], sz.width - 316 - eye_size[0] - gdata[i][2]) = gim_size[0] - floor(gdata[i][0]);
        map_y.at<float>(gdata[i][3], sz.width - 316 - eye_size[0] - gdata[i][2]) = floor(gdata[i][1]);
    }

    Mat src, disp;
    Mat dst(p.sdst, CV_8UC3);

    // create pixel maps for unwrapping panoramic images
    p.generate_map();

    bool do_calib = false;
    int px_jump = BIG_PX_JUMP;

    // display remapped camera output on loop until user presses escape
    bool do_run = true;
    while (do_run) {
        cap >> src;
        if (!src.size().width) {
            cerr << "Error: Could not read from webcam" << endl;
            exit(1);
        }

        remap(src, dst, p.map_x, p.map_y, INTER_NEAREST);
        remap(dst, dst_eye, map_x, map_y, INTER_NEAREST);
        resize(dst_eye, disp, sz, 0, 0, INTER_LINEAR);

        imshow("unwrapped image", disp);

        if (do_calib) {
            calib_line(src, Point(p.cent.x - CROSS_SIZE, p.cent.y), Point(p.cent.x + CROSS_SIZE, p.cent.y));
            calib_line(src, Point(p.cent.x, p.cent.y - CROSS_SIZE), Point(p.cent.x, p.cent.y + CROSS_SIZE));

            circle(src, p.cent, p.r_inner, Scalar(0x00, 0x00, 0xff), 2);
            circle(src, p.cent, p.r_outer, Scalar(0xff, 0x00, 0x00), 2);

            imshow("calibration", src);
        }

        int key = waitKey(1) & 0xff;
        /*if (key != 0xff)
            cout << "key: " << key << endl;*/
        switch (key) {
            case 'c':
                if (do_calib)
                    destroyWindow("calibration");

                do_calib = !do_calib;
                break;
            case 27: // ESC
                do_run = false;
                break;
            case ' ':
                if (px_jump == BIG_PX_JUMP)
                    px_jump = 1;
                else
                    px_jump = BIG_PX_JUMP;
                break;
            default:
                if (do_calib) {
                    switch (key) {
                        case 'w':
                            p.r_inner += px_jump;
                            p.generate_map();
                            break;
                        case 's':
                            if (p.r_inner > 0) {
                                p.r_inner -= px_jump;
                                p.r_inner = max(0, p.r_inner);
                                p.generate_map();
                            }
                            break;
                        case 'q':
                            p.r_outer += px_jump;
                            p.generate_map();
                            break;
                        case 'a':
                            if (p.r_outer > 0) {
                                p.r_outer -= px_jump;
                                p.r_outer = max(0, p.r_outer);
                                p.generate_map();
                            }
                            break;
                        case KEY_UP:
                            p.cent.y -= px_jump;
                            p.generate_map();
                            break;
                        case KEY_DOWN:
                            p.cent.y += px_jump;
                            p.generate_map();
                            break;
                        case KEY_LEFT:
                            p.cent.x -= px_jump;
                            p.generate_map();
                            break;
                        case KEY_RIGHT:
                            p.cent.x += px_jump;
                            p.generate_map();
                            break;
                    }
                }
        }
    }

    // write params to file
    p.write();
}

#endif /* BEEEYE_H */