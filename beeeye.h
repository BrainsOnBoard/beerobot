/*
 * File:   beeeye.h
 * Author: ad374
 *
 * Created on 16 May 2017, 10:59
 */

#ifndef BEEEYE_H
#define BEEEYE_H

// opencv includes
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

// bee-eye pixel map generated by gigerommatidiamodel.py
#include "gigerdatacam.h"

#ifdef USE_ROBOT
#define VIDEO_DEV "http://192.168.1.1:8080/?action=stream"
#else
#define VIDEO_DEV 0
#endif

using namespace std;
using namespace cv;

/*
 * Displays camera output on screen after passing through bee-eye transform.
 * User can press Q to quit.
 */
void run_camera() {
    Size sz_src(1280, 720);
    Size sz_dst(1280, 240);
    Point cent(sz_src.width / 2, sz_src.height / 2);
    int r_inner = 100;
    int r_outer = 500;

    // to capture webcam output
    VideoCapture cap(VIDEO_DEV);
    if (!cap.isOpened()) {
        cerr << "Error: Could not open webcam" << endl;
        exit(1);
    }

    // set camera resolution to max (only works on opencv v3+)
    cap.set(CAP_PROP_FRAME_WIDTH, sz_src.width);
    cap.set(CAP_PROP_FRAME_HEIGHT, sz_src.height);

    Mat src;
    Mat dst(sz_dst, CV_8UC3);

    // create pixel maps for unwrapping panoramic images
    Mat map_x(sz_dst, CV_32FC1);
    Mat map_y(sz_dst, CV_32FC1);
    for (int i = 0; i < sz_dst.height; i++) {
        for (int j = 0; j < sz_dst.width; j++) {
            float r = ((float) i / (float) sz_dst.height) * (r_outer - r_inner + r_inner);
            float th = ((float) j / (float) sz_dst.width) * 2 * M_PI;
            float x = cent.x + r * sin(th);
            float y = cent.y + r * cos(th);
            map_x.at<float>(i, j) = x;
            map_y.at<float>(i, j) = y;
        }
    }

    /*
    // create x and y pixel maps
    Mat map_x, map_y;
    map_x.create(sz_out, CV_32FC1);
    map_y.create(sz_out, CV_32FC1);
    for (int i = 0; i < gdataLength; i++) {
        map_x.at<float>(gdata[i][3], gdata[i][2]) = floor(gdata[i][0]);
        map_y.at<float>(gdata[i][3], gdata[i][2]) = floor(gdata[i][1]);
    }

    Mat src2;
    Mat disp;
     */

    // display remapped webcam output on loop until user presses Q
    while (1) {
        cap >> src;
        if (!src.size().width) {
            cerr << "Error: Could not read from webcam" << endl;
            exit(1);
        }

        remap(src, dst, map_x, map_y, INTER_NEAREST);

        /*
        resize(src, src2, sz);
        remap(src2, dst, map_x, map_y, INTER_LINEAR);
        resize(dst, disp, sz, 0, 0, INTER_NEAREST);
         */

        imshow("camera", dst);
        if ((char) (waitKey(1) & 0xff) == 'q')
            break;
    }
}

#endif /* BEEEYE_H */