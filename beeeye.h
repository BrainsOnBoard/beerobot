/*
 * File:   beeeye.h
 * Author: ad374
 *
 * Created on 16 May 2017, 10:59
 */

#ifndef BEEEYE_H
#define BEEEYE_H

// opencv includes
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

// bee-eye pixel map generated by gigerommatidiamodel.py
#include "gigerdatacam.h"

#include "ini.h"

#ifdef USE_ROBOT
#define VIDEO_DEV "http://192.168.1.1:8080/?action=stream"
#else
#define VIDEO_DEV 0
#endif

using namespace std;
using namespace cv;

const int CROSS_SIZE = 20;

inline void calib_line(Mat &src, Point p1, Point p2) {
    line(src, p1, p2, Scalar(0x00, 0xff, 0x00), 2);
}

/*
 * Displays camera output on screen after passing through bee-eye transform.
 * User can press Q to quit.
 */
void run_camera() {

    // read params from file
    CamParams p;
    p.read();

    Size sz_src(p.src_wd, p.src_ht);
    Size sz_dst(p.dst_wd, p.dst_ht);
    Point cent(round((double) p.src_wd * p.cent_x), round((double) p.src_ht * p.cent_y));
    int r_inner = round((double) p.src_ht * p.r_inner);
    int r_outer = round((double) p.src_ht * p.r_outer);

    // to capture webcam output
    VideoCapture cap(VIDEO_DEV);
    if (!cap.isOpened()) {
        cerr << "Error: Could not open webcam" << endl;
        exit(1);
    }

    // set camera resolution to max (only works on opencv v3+)
    cap.set(CAP_PROP_FRAME_WIDTH, sz_src.width);
    cap.set(CAP_PROP_FRAME_HEIGHT, sz_src.height);

    Mat src;
    Mat dst(sz_dst, CV_8UC3);

    // create pixel maps for unwrapping panoramic images
    Mat map_x(sz_dst, CV_32FC1);
    Mat map_y(sz_dst, CV_32FC1);
    for (int i = 0; i < sz_dst.height; i++) {
        for (int j = 0; j < sz_dst.width; j++) {
            float r = ((float) i / (float) sz_dst.height) * (r_outer - r_inner + r_inner);
            float th = ((float) j / (float) sz_dst.width) * 2 * M_PI;
            float x = cent.x + r * sin(th);
            float y = cent.y + r * cos(th);
            map_x.at<float>(i, j) = x;
            map_y.at<float>(i, j) = y;
        }
    }

    /*
    // create x and y pixel maps
    Mat map_x, map_y;
    map_x.create(sz_out, CV_32FC1);
    map_y.create(sz_out, CV_32FC1);
    for (int i = 0; i < gdataLength; i++) {
        map_x.at<float>(gdata[i][3], gdata[i][2]) = floor(gdata[i][0]);
        map_y.at<float>(gdata[i][3], gdata[i][2]) = floor(gdata[i][1]);
    }

    Mat src2;
    Mat disp;
     */

    bool do_calib = false;

    // display remapped webcam output on loop until user presses Q
    bool do_run = true;
    while (do_run) {
        cap >> src;
        if (!src.size().width) {
            cerr << "Error: Could not read from webcam" << endl;
            exit(1);
        }

        remap(src, dst, map_x, map_y, INTER_NEAREST);

        /*
        resize(src, src2, sz);
        remap(src2, dst, map_x, map_y, INTER_LINEAR);
        resize(dst, disp, sz, 0, 0, INTER_NEAREST);
         */

        imshow("unwrapped image", dst);

        if (do_calib) {
            calib_line(src, Point(cent.x - CROSS_SIZE, cent.y), Point(cent.x + CROSS_SIZE, cent.y));
            calib_line(src, Point(cent.x, cent.y - CROSS_SIZE), Point(cent.x, cent.y + CROSS_SIZE));

            circle(src, cent, r_inner, Scalar(0x00, 0x00, 0xff), 2);
            circle(src, cent, r_outer, Scalar(0xff, 0x00, 0x00), 2);

            imshow("calibration", src);
        }

        switch ((char) (waitKey(1) & 0xff)) {
            case 'c':
                if (do_calib)
                    destroyWindow("calibration");

                do_calib = !do_calib;
                break;
            case 'q':
                do_run = false;
                break;
        }
    }

    // write params to file
    p.write();
}

#endif /* BEEEYE_H */